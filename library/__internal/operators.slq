// prototypes and implementations of Silq operators

// unary operators

// !b
def __not_b(b:𝔹)lifted:𝔹;
def __not_B(b:𝔹)lifted:𝔹;

// -x
def __uminus_s[n:!ℕ](x:int[n])lifted:int[n];
def __uminus_S[n:!ℕ](x:!int[n])lifted:!int[n];
def __uminus_u[n:!ℕ](x:uint[n])lifted:uint[n];
def __uminus_U[n:!ℕ](x:!uint[n])lifted:!uint[n];

def __uminus_N(x:!ℕ)lifted:!ℤ;
def __uminus_Z(x:!ℤ)lifted:!ℤ;
def __uminus_Q(x:!ℚ)lifted:!ℚ;
def __uminus_R(x:!ℝ)lifted:!ℝ;
def __uminus_C(x:!ℂ)lifted:!ℂ;

// ~x
def __bitnot_b(b:𝔹)lifted:𝔹;
def __bitnot_B(b:!𝔹)lifted:𝔹;

def __bitnot_s[n:!ℕ](x:int[n])lifted:int[n];
def __bitnot_S[n:!ℕ](x:!int[n])lifted:!int[n];
def __bitnot_u[n:!ℕ](x:uint[n])lifted:uint[n];
def __bitnot_U[n:!ℕ](x:!uint[n])lifted:!uint[n];

def __bitnot_N(x:!ℕ)lifted:!ℤ;
def __bitnot_Z(x:!ℤ)lifted:!ℤ;
// def __bitnot_Q(x:!ℚ)lifted:!ℚ; // TODO?
// def __bitnot_R(x:!ℝ)lifted:!ℝ; // TODO?
// def __bitnot_C(x:!ℂ)lifted:!ℂ; // TODO?

// binary operators

// a+b
def __add_s[n:!ℕ](a:int[n],b:int[n])lifted:int[n];
def __add_Ss[n:!ℕ](a:!int[n],b:int[n])lifted:int[n];
def __add_sS[n:!ℕ](a:int[n],b:!int[n])lifted:int[n];
def __add_S[n:!ℕ](a:!int[n],b:!int[n])lifted:!int[n];

def __add_sb[n:!ℕ](a:int[n],b:𝔹)lifted:int[n];
def __add_Sb[n:!ℕ](a:!int[n],b:𝔹)lifted:int[n];
def __add_sB[n:!ℕ](a:int[n],b:!𝔹)lifted:int[n];
def __add_SB[n:!ℕ](a:!int[n],b:!𝔹)lifted:!int[n];

def __add_bs[n:!ℕ](b:𝔹,a:int[n])lifted:int[n];
def __add_Bs[n:!ℕ](b:!𝔹,a:int[n])lifted:int[n];
def __add_bS[n:!ℕ](b:𝔹,a:!int[n])lifted:int[n];
def __add_BS[n:!ℕ](b:!𝔹,a:!int[n])lifted:!int[n];

def __add_sZ[n:!ℕ](a:int[n],b:!ℤ)lifted:int[n];
def __add_SZ[n:!ℕ](a:!int[n],b:!ℤ)lifted:!int[n];
def __add_Zs[n:!ℕ](b:!ℤ,a:int[n])lifted:int[n];
def __add_ZS[n:!ℕ](b:!ℤ,a:!int[n])lifted:!int[n];

def __add_u[n:!ℕ](a:uint[n],b:uint[n])lifted:uint[n];
def __add_Uu[n:!ℕ](a:!uint[n],b:uint[n])lifted:uint[n];
def __add_uU[n:!ℕ](a:uint[n],b:!uint[n])lifted:uint[n];
def __add_U[n:!ℕ](a:!uint[n],b:!uint[n])lifted:!uint[n];

def __add_ub[n:!ℕ](a:uint[n],b:𝔹)lifted:uint[n];
def __add_Ub[n:!ℕ](a:!uint[n],b:𝔹)lifted:uint[n];
def __add_uB[n:!ℕ](a:uint[n],b:!𝔹)lifted:uint[n];
def __add_UB[n:!ℕ](a:!uint[n],b:!𝔹)lifted:!uint[n];

def __add_bu[n:!ℕ](b:𝔹,a:uint[n])lifted:uint[n];
def __add_Bu[n:!ℕ](b:!𝔹,a:uint[n])lifted:uint[n];
def __add_bU[n:!ℕ](b:𝔹,a:!uint[n])lifted:uint[n];
def __add_BU[n:!ℕ](b:!𝔹,a:!uint[n])lifted:!uint[n];

def __add_uZ[n:!ℕ](a:uint[n],b:!ℤ)lifted:uint[n];
def __add_UZ[n:!ℕ](a:!uint[n],b:!ℤ)lifted:!uint[n];
def __add_Zu[n:!ℕ](b:!ℤ,a:uint[n])lifted:uint[n];
def __add_ZU[n:!ℕ](b:!ℤ,a:!uint[n])lifted:!uint[n];

def __add_B(a:!𝔹,b:!𝔹)lifted:!ℕ;
def __add_N(a:!ℕ,b:!ℕ)lifted:!ℕ;
def __add_Z(a:!ℤ,b:!ℤ)lifted:!ℤ;
def __add_Q(a:!ℚ,b:!ℚ)lifted:!ℚ;
def __add_R(a:!ℝ,b:!ℝ)lifted:!ℝ;
def __add_C(a:!ℂ,b:!ℂ)lifted:!ℂ;

// a-b
def __sub_s[n:!ℕ](a:int[n],b:int[n])lifted:int[n];
def __sub_Ss[n:!ℕ](a:!int[n],b:int[n])lifted:int[n];
def __sub_sS[n:!ℕ](a:int[n],b:!int[n])lifted:int[n];
def __sub_S[n:!ℕ](a:!int[n],b:!int[n])lifted:!int[n];

def __sub_sb[n:!ℕ](a:int[n],b:𝔹)lifted:int[n];
def __sub_Sb[n:!ℕ](a:!int[n],b:𝔹)lifted:int[n];
def __sub_sB[n:!ℕ](a:int[n],b:!𝔹)lifted:int[n];
def __sub_SB[n:!ℕ](a:!int[n],b:!𝔹)lifted:!int[n];

def __sub_bs[n:!ℕ](b:𝔹,a:int[n])lifted:int[n];
def __sub_Bs[n:!ℕ](b:!𝔹,a:int[n])lifted:int[n];
def __sub_bS[n:!ℕ](b:𝔹,a:!int[n])lifted:int[n];
def __sub_BS[n:!ℕ](b:!𝔹,a:!int[n])lifted:!int[n];

def __sub_sZ[n:!ℕ](a:int[n],b:!ℤ)lifted:int[n];
def __sub_SZ[n:!ℕ](a:!int[n],b:!ℤ)lifted:!int[n];
def __sub_Zs[n:!ℕ](b:!ℤ,a:int[n])lifted:int[n];
def __sub_ZS[n:!ℕ](b:!ℤ,a:!int[n])lifted:!int[n];

def __sub_u[n:!ℕ](a:uint[n],b:uint[n])lifted:uint[n];
def __sub_Uu[n:!ℕ](a:!uint[n],b:uint[n])lifted:uint[n];
def __sub_uU[n:!ℕ](a:uint[n],b:!uint[n])lifted:uint[n];
def __sub_U[n:!ℕ](a:!uint[n],b:!uint[n])lifted:!uint[n];

def __sub_ub[n:!ℕ](a:uint[n],b:𝔹)lifted:uint[n];
def __sub_Ub[n:!ℕ](a:!uint[n],b:𝔹)lifted:uint[n];
def __sub_uB[n:!ℕ](a:uint[n],b:!𝔹)lifted:uint[n];
def __sub_UB[n:!ℕ](a:!uint[n],b:!𝔹)lifted:!uint[n];

def __sub_bu[n:!ℕ](b:𝔹,a:uint[n])lifted:uint[n];
def __sub_Bu[n:!ℕ](b:!𝔹,a:uint[n])lifted:uint[n];
def __sub_bU[n:!ℕ](b:𝔹,a:!uint[n])lifted:uint[n];
def __sub_BU[n:!ℕ](b:!𝔹,a:!uint[n])lifted:!uint[n];

def __sub_uZ[n:!ℕ](a:uint[n],b:!ℤ)lifted:uint[n];
def __sub_UZ[n:!ℕ](a:!uint[n],b:!ℤ)lifted:!uint[n];
def __sub_Zu[n:!ℕ](b:!ℤ,a:uint[n])lifted:uint[n];
def __sub_ZU[n:!ℕ](b:!ℤ,a:!uint[n])lifted:!uint[n];

def __sub_B(a:!𝔹,b:!𝔹)lifted:!ℤ;
def __sub_N(a:!ℕ,b:!ℕ)lifted:!ℤ;
def __sub_Z(a:!ℤ,b:!ℤ)lifted:!ℤ;
def __sub_Q(a:!ℚ,b:!ℚ)lifted:!ℚ;
def __sub_R(a:!ℝ,b:!ℝ)lifted:!ℝ;
def __sub_C(a:!ℂ,b:!ℂ)lifted:!ℂ;

// a sub b
def __nsub_u[n:!ℕ](a:uint[n],b:uint[n])lifted:uint[n];
def __nsub_Uu[n:!ℕ](a:!uint[n],b:uint[n])lifted:uint[n];
def __nsub_uU[n:!ℕ](a:uint[n],b:!uint[n])lifted:uint[n];
def __nsub_U[n:!ℕ](a:!uint[n],b:!uint[n])lifted:!uint[n];

def __nsub_ub[n:!ℕ](a:uint[n],b:𝔹)lifted:uint[n];
def __nsub_Ub[n:!ℕ](a:!uint[n],b:𝔹)lifted:uint[n];
def __nsub_uB[n:!ℕ](a:uint[n],b:!𝔹)lifted:uint[n];
def __nsub_UB[n:!ℕ](a:!uint[n],b:!𝔹)lifted:!uint[n];

def __nsub_bu[n:!ℕ](b:𝔹,a:uint[n])lifted:uint[n];
def __nsub_Bu[n:!ℕ](b:!𝔹,a:uint[n])lifted:uint[n];
def __nsub_bU[n:!ℕ](b:𝔹,a:!uint[n])lifted:uint[n];
def __nsub_BU[n:!ℕ](b:!𝔹,a:!uint[n])lifted:!uint[n];

def __nsub_uZ[n:!ℕ](a:uint[n],b:!ℤ)lifted:uint[n];
def __nsub_UZ[n:!ℕ](a:!uint[n],b:!ℤ)lifted:!uint[n];
def __nsub_Zu[n:!ℕ](b:!ℤ,a:uint[n])lifted:uint[n];
def __nsub_ZU[n:!ℕ](b:!ℤ,a:!uint[n])lifted:!uint[n];

def __nsub_b(a:𝔹,b:𝔹)lifted:𝔹;
def __nsub_bB(a:𝔹,b:!𝔹)lifted:𝔹;
def __nsub_Bb(a:!𝔹,b:𝔹)lifted:𝔹;
def __nsub_B(a:!𝔹,b:!𝔹)lifted:!𝔹;

def __nsub_N(a:!ℕ,b:!ℕ)lifted:!ℕ;
def __nsub_Z(a:!ℤ,b:!ℤ)lifted:!ℕ;
def __nsub_Q(a:!ℚ,b:!ℚ)lifted:!ℚ;
def __nsub_R(a:!ℝ,b:!ℝ)lifted:!ℝ;
def __nsub_C(a:!ℂ,b:!ℂ)lifted:!ℂ;

// a·b
def __mul_s[n:!ℕ](a:int[n],b:int[n])lifted:int[n];
def __mul_sℤ[n:!ℕ](a:int[n],b:!ℤ)lifted:int[n];
def __mul_ℤs[n:!ℕ](a:!ℤ,b:int[n])lifted:int[n];

def __mul_u[n:!ℕ](a:uint[n],b:uint[n])lifted:uint[n];
def __mul_uℤ[n:!ℕ](a:uint[n],b:!ℤ)lifted:uint[n];
def __mul_ℤu[n:!ℕ](a:!ℤ,b:uint[n])lifted:uint[n];

def __mul_ℕ(a:!ℕ,b:!ℕ)lifted:!ℕ;
def __mul_ℤ(a:!ℤ,b:!ℤ)lifted:!ℤ;
def __mul_ℚ(a:!ℚ,b:!ℚ)lifted:!ℚ;
def __mul_ℝ(a:!ℝ,b:!ℝ)lifted:!ℝ;
def __mul_ℂ(a:!ℂ,b:!ℂ)lifted:!ℂ;

// a/b
def __div_ℚ(a:!ℚ,b:!ℚ)lifted:!ℚ;
def __div_ℝ(a:!ℝ,b:!ℝ)lifted:!ℝ;
def __div_ℂ(a:!ℂ,b:!ℂ)lifted:!ℂ;

// a div b
def __idiv_s[n:!ℕ](a:int[n],b:int[n])lifted:int[n];
def __idiv_sℤ[n:!ℕ](a:int[n],b:!ℤ)lifted:int[n];
def __idiv_ℤs[n:!ℕ](a:!ℤ,b:int[n])lifted:int[n];

def __idiv_u[n:!ℕ](a:uint[n],b:uint[n])lifted:uint[n];
def __idiv_uℤ[n:!ℕ](a:uint[n],b:!ℤ)lifted:uint[n];
def __idiv_ℤu[n:!ℕ](a:!ℤ,b:uint[n])lifted:uint[n];

def __idiv_ℕ(a:!ℕ,b:!ℕ)lifted:!ℕ;
def __idiv_ℤ(a:!ℤ,b:!ℤ)lifted:!ℤ;
def __idiv_ℚ(a:!ℚ,b:!ℚ)lifted:!ℤ;
def __idiv_ℝ(a:!ℝ,b:!ℝ)lifted:!ℤ;

// a % b
def __mod_s[m:!ℕ,n:!ℕ](a:int[m],b:int[n])lifted:int[n];
def __mod_ℤs[n:!ℕ](a:!ℤ,b:int[n])lifted:int[n];

def __mod_u[m:!ℕ,n:!ℕ](a:uint[m],b:uint[n])lifted:uint[n];
def __mod_ℤu[n:!ℕ](a:!ℤ,b:uint[n])lifted:uint[n];
def __mod_uℕ[n:!ℕ](a:uint[n],b:!ℕ)lifted:uint[n];

def __mod_us[m:!ℕ,n:!ℕ](a:uint[m],b:int[n])lifted:int[n];
def __mod_su[m:!ℕ,n:!ℕ](a:int[m],b:uint[n])lifted:uint[n];

def __mod_ℕ(a:!ℕ,b:!ℕ)lifted:!ℕ;
def __mod_ℤ(a:!ℤ,b:!ℤ)lifted:!ℤ;
def __mod_ℚ(a:!ℚ,b:!ℚ)lifted:!ℚ;
def __mod_ℝ(a:!ℝ,b:!ℝ)lifted:!ℝ;

// a ^ b
def __pow_ℕ(a:!ℕ,b:!ℕ)lifted:!ℕ;
def __pow_ℤℕ(a:!ℤ,b:!ℕ)lifted:!ℤ;
def __pow_ℚℕ(a:!ℚ,b:!ℕ)lifted:!ℚ;
def __pow_ℝℕ(a:!ℕ,b:!ℕ)lifted:!ℝ;

def __pow_ℚℤ(a:!ℚ,b:!ℤ)lifted:!ℚ;
def __pow_ℝℚ(a:!ℝ,b:!ℚ)lifted:!ℝ;
def __pow_ℝℝ(a:!ℝ,b:!ℝ)lifted:!ℝ;

// a ~ b
def __cat_t[n:!ℕ,m:!ℕ][σ:*^n,τ:*^m](moved x:∏ σ,moved y:∏ τ)qfree:∏(σ~τ);
def __cat_v[n:!ℕ,m:!ℕ,a:*](moved xs:a^n,moved ys:a^m)qfree:a^(n+m);
def __cat_a[a:*](moved xs:a[],moved ys:a[])qfree:a[];

// a | b
def __orb_s[n:!ℕ](a:int[n],b:int[n])lifted:int[n];
def __orb_sℤ[n:!ℕ](a:int[n],b:!ℤ)lifted:int[n];
def __orb_ℤs[n:!ℕ](a:!ℤ,b:!int[n])lifted:int[n];

def __orb_u[n:!ℕ](a:uint[n],b:uint[n])lifted:uint[n];
def __orb_uℤ[n:!ℕ](a:uint[n],b:!ℤ)lifted:uint[n];
def __orb_ℤu[n:!ℕ](a:!ℤ,b:!uint[n])lifted:uint[n];

def __orb_ℕ(a:!ℕ,b:!ℕ)lifted:!ℕ;
def __orb_ℤ(a:!ℤ,b:!ℤ)lifted:!ℤ;

// a ⊕ b
def __xorb_s[n:!ℕ](a:int[n],b:int[n])lifted:int[n];
def __xorb_sℤ[n:!ℕ](a:int[n],b:!ℤ)lifted:int[n];
def __xorb_ℤs[n:!ℕ](a:!ℤ,b:!int[n])lifted:int[n];

def __xorb_u[n:!ℕ](a:uint[n],b:uint[n])lifted:uint[n];
def __xorb_uℤ[n:!ℕ](a:uint[n],b:!ℤ)lifted:uint[n];
def __xorb_ℤu[n:!ℕ](a:!ℤ,b:!uint[n])lifted:uint[n];

def __xorb_ℕ(a:!ℕ,b:!ℕ)lifted:!ℕ;
def __xorb_ℤ(a:!ℤ,b:!ℤ)lifted:!ℤ;

// a & b
def __andb_s[n:!ℕ](a:int[n],b:int[n])lifted:int[n];
def __andb_sℤ[n:!ℕ](a:int[n],b:!ℤ)lifted:int[n];
def __andb_ℤs[n:!ℕ](a:!ℤ,b:!int[n])lifted:int[n];

def __andb_u[n:!ℕ](a:uint[n],b:uint[n])lifted:uint[n];
def __andb_uℤ[n:!ℕ](a:uint[n],b:!ℤ)lifted:uint[n];
def __andb_ℤu[n:!ℕ](a:!ℤ,b:!uint[n])lifted:uint[n];

def __andb_ℕ(a:!ℕ,b:!ℕ)lifted:!ℕ;
def __andb_ℤ(a:!ℤ,b:!ℤ)lifted:!ℤ;

// comparison operators

def __lt_t[n:!ℕ,m:!ℕ][σ:*^n,τ:*^m](x:∏ σ,y:∏ τ)lifted:∏(σ~τ);
def __lt_v[n:!ℕ,m:!ℕ,a:*](xs:a^n,ys:a^m)lifted:𝔹;
def __lt_a[a:*](xs:a[],ys:a[])lifted:𝔹;

def __lt_𝔹(a:𝔹,b:𝔹)lifted:𝔹;
def __lt_ℕ(a:!ℕ,b:!ℕ)lifted:!𝔹;
def __lt_ℚ(a:!ℚ,b:!ℚ)lifted:!𝔹;
def __lt_ℝ(a:!ℝ,b:!ℝ)lifted:!𝔹;

def __le_t[n:!ℕ,m:!ℕ][σ:*^n,τ:*^m](x:∏ σ,y:∏ τ)lifted:∏(σ~τ);
def __le_v[n:!ℕ,m:!ℕ,a:*](xs:a^n,ys:a^m)lifted:𝔹;
def __le_a[a:*](xs:a[],ys:a[])lifted:𝔹;

def __le_𝔹(a:𝔹,b:𝔹)lifted:𝔹;
def __le_ℕ(a:!ℕ,b:!ℕ)lifted:!𝔹;
def __le_ℚ(a:!ℚ,b:!ℚ)lifted:!𝔹;
def __le_ℝ(a:!ℝ,b:!ℝ)lifted:!𝔹;

def __gt_t[n:!ℕ,m:!ℕ][σ:*^n,τ:*^m](x:∏ σ,y:∏ τ)lifted:∏(σ~τ);
def __gt_v[n:!ℕ,m:!ℕ,a:*](xs:a^n,ys:a^m)lifted:𝔹;
def __gt_a[a:*](xs:a[],ys:a[])lifted:𝔹;

def __gt_𝔹(a:𝔹,b:𝔹)lifted:𝔹;
def __gt_ℕ(a:!ℕ,b:!ℕ)lifted:!𝔹;
def __gt_ℚ(a:!ℚ,b:!ℚ)lifted:!𝔹;
def __gt_ℝ(a:!ℝ,b:!ℝ)lifted:!𝔹;

def __ge_t[n:!ℕ,m:!ℕ][σ:*^n,τ:*^m](x:∏ σ,y:∏ τ)lifted:∏(σ~τ);
def __ge_v[n:!ℕ,m:!ℕ,a:*](xs:a^n,ys:a^m)lifted:𝔹;
def __ge_a[a:*](xs:a[],ys:a[])lifted:𝔹;

def __ge_𝔹(a:𝔹,b:𝔹)lifted:𝔹;
def __ge_ℕ(a:!ℕ,b:!ℕ)lifted:!𝔹;
def __ge_ℚ(a:!ℚ,b:!ℚ)lifted:!𝔹;
def __ge_ℝ(a:!ℝ,b:!ℝ)lifted:!𝔹;

def __eq_t[n:!ℕ,m:!ℕ][σ:*^n,τ:*^m](x:∏ σ,y:∏ τ)lifted:∏(σ~τ);
def __eq_v[n:!ℕ,m:!ℕ,a:*](xs:a^n,ys:a^m)lifted:𝔹;
def __eq_a[a:*](xs:a[],ys:a[])lifted:𝔹;

def __eq_𝔹(a:𝔹,b:𝔹)lifted:𝔹;
def __eq_ℕ(a:!ℕ,b:!ℕ)lifted:!𝔹;
def __eq_ℚ(a:!ℚ,b:!ℚ)lifted:!𝔹;
def __eq_ℝ(a:!ℝ,b:!ℝ)lifted:!𝔹;

def __neq_t[n:!ℕ,m:!ℕ][σ:*^n,τ:*^m](x:∏ σ,y:∏ τ)lifted:∏(σ~τ);
def __neq_v[n:!ℕ,m:!ℕ,a:*](xs:a^n,ys:a^m)lifted:𝔹;
def __neq_a[a:*](xs:a[],ys:a[])lifted:𝔹;

def __neq_𝔹(a:𝔹,b:𝔹)lifted:𝔹;
def __neq_ℕ(a:!ℕ,b:!ℕ)lifted:!𝔹;
def __neq_ℚ(a:!ℚ,b:!ℚ)lifted:!𝔹;
def __neq_ℝ(a:!ℝ,b:!ℝ)lifted:!𝔹;

// binary assignment operators

// a+=b
def __add_assign_s[n:!ℕ](moved a:int[n],const b:int[n])qfree:int[n];
def __add_assign_sℤ[n:!ℕ](moved a:int[n],const b:!ℤ)qfree:int[n];
def __add_assign_ℤs[n:!ℕ](moved b:!ℤ,const a:int[n])qfree:int[n]; // TODO: might be confusing

def __add_assign_u[n:!ℕ](moved a:uint[n],const b:uint[n])qfree:uint[n];
def __add_assign_uℤ[n:!ℕ](moved a:uint[n],const b:!ℤ)qfree:uint[n];
def __add_assign_ℤu[n:!ℕ](moved b:!ℤ,const a:uint[n])qfree:uint[n]; // TODO: might be confusing

def __add_assign_ℕ(moved a:!ℕ,const b:!ℕ)qfree:!ℕ;
def __add_assign_ℤ(moved a:!ℤ,const b:!ℤ)qfree:!ℤ;
def __add_assign_ℚ(moved a:!ℚ,const b:!ℚ)qfree:!ℚ;
def __add_assign_ℝ(moved a:!ℝ,const b:!ℝ)qfree:!ℝ;
def __add_assign_ℂ(moved a:!ℂ,const b:!ℂ)qfree:!ℂ;

// a-=b
def __sub_assign_s[n:!ℕ](moved a:int[n],const b:int[n])qfree:int[n];
def __sub_assign_sℤ[n:!ℕ](moved a:int[n],const b:!ℤ)qfree:int[n];
def __sub_assign_ℤs[n:!ℕ](moved a:!ℤ,const b:int[n])qfree:int[n]; // TODO: might be confusing

def __sub_assign_u[n:!ℕ](moved a:uint[n],const b:uint[n])qfree:uint[n];
def __sub_assign_uℤ[n:!ℕ](moved a:uint[n],const b:!ℤ)qfree:uint[n];
def __sub_assign_ℤu[n:!ℕ](moved a:!ℤ,const b:uint[n])qfree:uint[n]; // TODO: might be confusing

def __sub_assign_ℕ(moved a:!ℕ,const b:!ℕ)qfree:!ℕ;
def __sub_assign_ℤ(moved a:!ℤ,const b:!ℤ)qfree:!ℤ;
def __sub_assign_ℚ(moved a:!ℚ,const b:!ℚ)qfree:!ℚ;
def __sub_assign_ℝ(moved a:!ℝ,const b:!ℝ)qfree:!ℝ;
def __sub_assign_ℂ(moved a:!ℂ,const b:!ℂ)qfree:!ℂ;

// a sub= b
def __nsub_assign_s[n:!ℕ](moved a:int[n],const b:int[n])qfree:int[n];
def __nsub_assign_sℤ[n:!ℕ](moved a:int[n],const b:!ℤ)qfree:int[n];
def __nsub_assign_ℤs[n:!ℕ](moved a:!ℤ,const b:int[n])qfree:int[n];  // TODO: might be confusing

def __nsub_assign_u[n:!ℕ](moved a:uint[n],const b:uint[n])qfree:uint[n];
def __nsub_assign_uℤ[n:!ℕ](moved a:uint[n],const b:!ℤ)qfree:uint[n];
def __nsub_assign_ℤu[n:!ℕ](moved a:!ℤ,const b:uint[n])qfree:uint[n];  // TODO: might be confusing

def __nsub_assign_ℤ(moved a:!ℤ,const b:!ℤ)qfree:!ℕ;

// a·=b
def __mul_assign_s[n:!ℕ](moved a:!int[n],const b:int[n])qfree:int[n];
def __mul_assign_sℤ[n:!ℕ](moved a:!int[n],const b:!ℤ)qfree:!int[n];
def __mul_assign_ℤs[n:!ℕ](moved a:!ℤ,const b:int[n])qfree:int[n];  // TODO: might be confusing

def __mul_assign_u[n:!ℕ](moved a:!uint[n],const b:uint[n])qfree:uint[n];
def __mul_assign_uℤ[n:!ℕ](moved a:!uint[n],const b:!ℤ)qfree:!uint[n];
def __mul_assign_ℤu[n:!ℕ](moved a:!ℤ,const b:uint[n])qfree:uint[n];  // TODO: might be confusing

def __mul_assign_ℕ(moved a:!ℕ,const b:!ℕ)qfree:!ℕ;
def __mul_assign_ℤ(moved a:!ℤ,const b:!ℤ)qfree:!ℤ;
def __mul_assign_ℚ(moved a:!ℚ,const b:!ℚ)qfree:!ℚ;
def __mul_assign_ℝ(moved a:!ℝ,const b:!ℝ)qfree:!ℝ;
def __mul_assign_ℂ(moved a:!ℂ,const b:!ℂ)qfree:!ℂ;

// a/=b
def __div_assign_ℚ(moved a:!ℚ,const b:!ℚ)qfree:!ℚ;
def __div_assign_ℝ(moved a:!ℝ,const b:!ℝ)qfree:!ℝ;
def __div_assign_ℂ(moved a:!ℂ,const b:!ℂ)qfree:!ℂ;

// a div= b
def __idiv_assign_s[n:!ℕ](moved a:!int[n],const b:int[n])qfree:int[n];
def __idiv_assign_sℤ[n:!ℕ](moved a:!int[n],const b:!ℤ)qfree:int[n];
def __idiv_assign_ℤs[n:!ℕ](moved a:!ℤ,const b:int[n])qfree:int[n]; // TODO: might be confusing

def __idiv_assign_u[n:!ℕ](moved a:!uint[n],const b:uint[n])qfree:uint[n];
def __idiv_assign_uℤ[n:!ℕ](moved a:!uint[n],const b:!ℤ)qfree:uint[n];
def __idiv_assign_ℤu[n:!ℕ](moved a:!ℤ,const b:uint[n])qfree:uint[n];  // TODO: might be confusing

def __idiv_assign_ℕ(a:!ℕ,b:!ℕ)qfree:!ℕ;
def __idiv_assign_ℤ(a:!ℤ,b:!ℤ)qfree:!ℤ;
def __idiv_assign_ℚ(a:!ℚ,b:!ℚ)qfree:!ℤ;
def __idiv_assign_ℝ(a:!ℝ,b:!ℝ)qfree:!ℤ;

// a %= b
def __mod_assign_s[m:!ℕ,n:!ℕ](moved a:!int[m],const b:int[n])qfree:int[n];
def __mod_assign_ℤs[n:!ℕ](moved a:!ℤ,const b:int[n])qfree:int[n];

def __mod_assign_u[m:!ℕ,n:!ℕ](moved a:!uint[m],const b:uint[n])qfree:uint[n];
def __mod_assign_ℤu[n:!ℕ](moved a:!ℤ,const b:uint[n])qfree:uint[n];
def __mod_assign_uℕ[n:!ℕ](moved a:!uint[n],const b:!ℕ)qfree:!uint[n];

def __mod_assign_us[m:!ℕ,n:!ℕ](moved a:!uint[m],const b:int[n])qfree:int[n];
def __mod_assign_su[m:!ℕ,n:!ℕ](moved a:!int[m],const b:uint[n])qfree:uint[n];

def __mod_assign_ℕ(moved a:!ℕ,const b:!ℕ)qfree:!ℕ;
def __mod_assign_ℤ(moved a:!ℤ,const b:!ℤ)qfree:!ℤ;
def __mod_assign_ℚ(moved a:!ℚ,const b:!ℚ)qfree:!ℚ;
def __mod_assign_ℝ(moved a:!ℝ,const b:!ℝ)qfree:!ℝ;

// a ^= b
def __pow_assign_ℕ(moved a:!ℕ,const b:!ℕ)qfree:!ℕ;
def __pow_assign_ℤℕ(moved a:!ℤ,const b:!ℕ)qfree:!ℤ;
def __pow_assign_ℚℕ(moved a:!ℚ,const b:!ℕ)qfree:!ℚ;
def __pow_assign_ℝℕ(moved a:!ℕ,const b:!ℕ)qfree:!ℝ;

def __pow_assign_ℚℤ(moved a:!ℚ,const b:!ℤ)qfree:!ℚ;
def __pow_assign_ℝℚ(moved a:!ℝ,const b:!ℚ)qfree:!ℝ;
def __pow_assign_ℝℝ(moved a:!ℝ,const b:!ℝ)qfree:!ℝ;

// a ~= b

def __cat_assign_t[n:!ℕ,m:!ℕ][σ:*^n,τ:*^m](moved x:∏ σ,moved y:∏ τ)qfree:∏(σ~τ);
def __cat_assign_v[n:!ℕ,m:!ℕ,a:*](moved xs:a^n,moved ys:a^m)qfree:a^(n+m);
def __cat_assign_a[a:*](moved xs:a[],moved ys:a[])qfree:a[];

// a |= b
def __orb_assign_s[n:!ℕ](moved a:!int[n],const b:int[n])qfree:int[n];
def __orb_assign_sℤ[n:!ℕ](moved a:!int[n],const b:!ℤ)qfree:!int[n];
def __orb_assign_ℤs[n:!ℕ](moved a:!ℤ,const b:int[n])qfree:int[n]; // TODO: potentially confusing

def __orb_assign_u[n:!ℕ](moved a:!uint[n],const b:uint[n])qfree:uint[n];
def __orb_assign_uℤ[n:!ℕ](moved a:!uint[n],const b:!ℤ)qfree:!uint[n];
def __orb_assign_ℤu[n:!ℕ](moved a:!ℤ,const b:uint[n])qfree:uint[n]; // TODO: potentially confusing

def __orb_assign_ℕ(moved a:!ℕ,const b:!ℕ)qfree:!ℕ;
def __orb_assign_ℤ(moved a:!ℤ,const b:!ℤ)qfree:!ℤ;

// a ⊕= b
def __xorb_assign_s[n:!ℕ](moved a:int[n],const b:int[n])qfree:int[n];
def __xorb_assign_sℤ[n:!ℕ](moved a:int[n],const b:!ℤ)qfree:int[n];
def __xorb_assign_ℤs[n:!ℕ](moved a:!ℤ,const b:!int[n])qfree:int[n]; // TODO: potentially confusing

def __xorb_assign_u[n:!ℕ](moved a:uint[n],const b:uint[n])qfree:uint[n];
def __xorb_assign_uℤ[n:!ℕ](moved a:uint[n],const b:!ℤ)qfree:uint[n];
def __xorb_assign_ℤu[n:!ℕ](moved a:!ℤ,const b:uint[n])qfree:uint[n]; // TODO: potentially confusing

def __xorb_assign_ℕ(moved a:!ℕ,const b:!ℕ)qfree:!ℕ;
def __xorb_assign_ℤ(moved a:!ℤ,const b:!ℤ)qfree:!ℤ;

// a &= b
def __andb_assign_s[n:!ℕ](moved a:!int[n],const b:int[n])qfree:int[n];
def __andb_assign_sℤ[n:!ℕ](moved a:!int[n],const b:!ℤ)qfree:!int[n];
def __andb_assign_ℤs[n:!ℕ](moved a:!ℤ,const b:!int[n])qfree:int[n];

def __andb_assign_u[n:!ℕ](moved a:!uint[n],const b:uint[n])qfree:uint[n];
def __andb_assign_uℤ[n:!ℕ](moved a:!uint[n],const b:!ℤ)qfree:uint[n];
def __andb_assign_ℤu[n:!ℕ](moved a:!ℤ,b:!uint[n])qfree:uint[n];

def __andb_assign_ℕ(moved a:!ℕ,const b:!ℕ)qfree:!ℕ;
def __andb_assign_ℤ(moved a:!ℤ,const b:!ℤ)qfree:!ℤ;
