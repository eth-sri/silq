
/+
def main(){
	x:=0:𝔹;
	y:=0:𝔹;
	(x,y)[0]=0:𝔹; // TODO: error
}
+/
/+
def main(){
	x:=vector(10,0:𝔹);
	(x[0],x[1])[0]=1:𝔹; // TODO: error
}
+/
/+
def main(){
	x:=H(0:𝔹);
	//x:=((x:𝔹)qfree⇒x)(x);
	x:=x;
	// TODO: error
	__show(__query("dep", x));
}
+/
/+
def main(){
	[1,2]:=[1,2,3]; // TODO: error
}
+/

/+
def main(){
	a:=[]:ℕ[]; // TODO: error here?
	a~=[1];
}
+/

//def foo[n:!𝔹]()⇒vector(n,0:𝔹);

/+
def main(){
	n:=200; // TODO: make running time scale linearly in n!
	a:=vector(n,1:𝔹);
	r:=0:int[32];
	def index(a: 𝔹^n,i:!ℕ)lifted{
		return a[i];
	}
	for i in [0..n){
		r+=a[i];
		r+=index(a,i);
	}
	return r;
}
+/

/+
def main(){
	x:=H(0:𝔹);
	y:=dup(x);
	while(measure(H(0:𝔹))){
		forget(y);
		y:=dup(x); // TODO
	}
	return H(x);
}
+/


/+
def arcsin(q:!ℝ) lifted :!ℝ;
def sqrt(q:!ℝ) lifted :!ℝ;

def WState[n:!N](q0:𝔹,q1s:𝔹^n)mfree:𝔹×𝔹^n {
    if n+1==1{
        q0 := X(q0);
    } else {
        theta := arcsin(1.0 / sqrt(n));
        q0 := rotY(2*theta, q0);

        if !q0{
            (q1s[0], q1s[1..n]) := WState[n-1](q1s[0], q1s[1..n]); // TODO
        }
    }
    return (q0, q1s)
}
+/

/+
def arcsin(q:!ℝ) lifted :!ℝ;
def sqrt(q:!ℝ) lifted :!ℝ;

def WState[n:!N](q0:𝔹,q1s:𝔹^n)mfree:𝔹×𝔹^n {
    if n+1==1{
        q0 := X(q0);
    } else {
        theta := arcsin(1.0 / sqrt(n));
        q0 := rotY(2*theta, q0);

        if !q0{
            (q1s[0], q1s[1..n]) := WState[n sub 1](q1s[0], q1s[1..n]); // TODO
        }
    }
    return (q0, q1s)
}
+/

/+
def arcsin(q:!ℝ) lifted :!ℝ;
def sqrt(q:!ℝ) lifted :!ℝ;

def WState[n:!N](q0:𝔹,q1s:𝔹^n)mfree:𝔹×𝔹^n {
    if n+1==1{
        q0 := X(q0);
    } else {
        theta := arcsin(1.0 / sqrt(n));
        q0 := rotY(2*theta, q0);

        if !q0{
            (q1s[0], q1s[1..n]) := WState[n-1 coerce !ℕ](q1s[0], q1s[1..n]); // TODO
        }
    }
    return (q0, q1s)
}
+/


