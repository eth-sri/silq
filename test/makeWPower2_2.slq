
def qNOT[n:!ℕ](const i:uint[n],xs:𝔹^2^n){
	for k in 0..2^n{
		if i==k{
			xs[k]:=X(xs[k]);
		}
	}
	return xs;
}

def succ[n:!ℕ](x:uint[n])qfree{ x+=1; return x; }
def index[n:!ℕ][m:!ℕ](const xs:𝔹^m)lifted:uint[n]⇒if m≤1||xs[0] then 0:uint[n] else succ(index[n](xs[1..m]));
n:=2;
def main(){
	xs:=vector(2^n,0:𝔹);
	i:=0:uint[n];
	for k in 0..n{ i[k]:=H(i[k]); }
	xs:=qNOT[n](i,xs);
	forget(i=index[n](xs));
	return xs;
}
